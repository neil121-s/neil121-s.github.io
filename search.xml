<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库相关</title>
      <link href="/2022/09/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/"/>
      <url>/2022/09/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="ORM-object-relational-mapping"><a href="#ORM-object-relational-mapping" class="headerlink" title="ORM (object relational mapping)"></a>ORM (object relational mapping)</h1><blockquote><p>定义一张数据库的表 就是定义一个继承自 django.db.models.Model 的类<br><br>  定义该表中的字段（列）， 就是定义该类里面的一些属性<br><br>  类的方法就是对该表中数据的处理方法，包括 数据的增删改查<br></p></blockquote><h1 id="生成表"><a href="#生成表" class="headerlink" title="生成表"></a>生成表</h1><p>如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Customer(models.Model):</span><br><span class="line">    # 客户名称</span><br><span class="line">    name = models.CharField(max_length=200)</span><br><span class="line"></span><br><span class="line">    # 联系电话</span><br><span class="line">    phonenumber = models.CharField(max_length=200)</span><br><span class="line"></span><br><span class="line">    # 地址</span><br><span class="line">    address = models.CharField(max_length=200)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://docs.djangoproject.com/en/2.0/ref/models/fields/#model-field-types">field 的官方文档</a></p><p>新增或者修改了后需要运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations common</span><br></pre></td></tr></table></figure><p>告诉Django common 的models.py 有更新</p><p>然后执行以下，生成表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h1 id="将数据库中的表自动生成对象"><a href="#将数据库中的表自动生成对象" class="headerlink" title="将数据库中的表自动生成对象"></a>将数据库中的表自动生成对象</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py inspectdb &gt; mysite\models.py</span><br></pre></td></tr></table></figure><h1 id="生成超级用户"><a href="#生成超级用户" class="headerlink" title="生成超级用户"></a>生成超级用户</h1><p>使用Django 中自带的 app admin 生成可视化的数据库操作</p><pre><code>python manage.py createsuperuser username</code></pre><p>通过 host&#x2F;admin 如 127.0.0.1:8000&#x2F;admin 访问</p><p>自己创建的表单，需要在代码中注册,一般在app下的 <code>admin.py</code> 中进行修改。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">admin.site.register(Customer)</span><br></pre></td></tr></table></figure><h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><p>用 django 中 继承于 model.Model 的类进行查询。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qs = Customer.objects().values() #查询Customer 表中的所有的数据的集合</span><br></pre></td></tr></table></figure><p>条件查询：通过 HttpRequset 中的 GET 属性获取查询条件。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ph = request.GET.get(&#x27;phone_number&#x27;,None)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://steelkiwi.com/blog/best-practices-working-django-models-python/">Django model最佳实践链接</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 能工巧匠路 </category>
          
          <category> Python </category>
          
          <category> Django笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django基础</title>
      <link href="/2022/09/02/Django%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/09/02/Django%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><pre><code>django-admin startproject mysite</code></pre><blockquote><p>会创建以下目录和文件</p></blockquote><ul><li>外层的 mysite&#x2F; 根目录是项目的容器。这个目录的名称对 Django 没有什么作用，你可以根据喜好重命名。</li><li>manage.py 是一个命令行实用脚本，可以通过不同的方式与 Django 项目交互。这个文件的详细说明参<br>见 Django Project 网站。</li><li>内部的 mysite&#x2F; 目录是项目的 Python 包。导入这里面的内容时要使用目录的名称（如<br>mysite.urls ）。</li><li>mysite&#x2F;init.py 是一个空文件，目的是让 Python 把这个目录识别为 Python 包。<br>Python，关于包的说明请阅读 Python 官方文档。）</li><li>mysite&#x2F;settings.py 是 Django 项目的设置&#x2F;配置。附录 D 对设置做了详细说明。</li><li>mysite&#x2F;urls.py 是 Django 项目的 URL 声明，即 Django 驱动的网站的“目录”。</li><li>mysite&#x2F;wsgi.py 是兼容 WSGI 的 Web 服务器的入口点，用于伺服项目</li></ul><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><pre><code>python manage.py startapp myapp</code></pre><blockquote><p>执行上面的命令会在当前路径下创建<code>myapp</code>目录，其目录结构如下所示：</p></blockquote><ul><li><code>__init__.py</code>：一个空文件，告诉Python解释器这个目录应该被视为一个Python的包。</li><li><code>admin.py</code>：可以用来注册模型，用于在Django框架自带的管理后台中管理模型。</li><li><code>apps.py</code>：当前应用的配置文件。</li><li><code>migrations</code>：存放与模型有关的数据库迁移信息。<ul><li><code>__init__.py</code>：一个空文件，告诉Python解释器这个目录应该被视为一个Python的包。</li></ul></li><li><code>models.py</code>：存放应用的数据模型（MTV中的M）。</li><li><code>tests.py</code>：包含测试应用各项功能的测试类和测试函数。</li><li><code>views.py</code>：处理用户HTTP请求并返回HTTP响应的函数或类（MTV中的V）。</li></ul><h3 id="关于app"><a href="#关于app" class="headerlink" title="关于app"></a>关于app</h3><blockquote><p>Django 中的一个app 就是项目里面的一个应用的意思。<br>  一个项目包含多个app。<br>  一个app 通常就是一个相对独立的模块 ，实现相对独立的功能。</p></blockquote><h2 id="URL-和路由"><a href="#URL-和路由" class="headerlink" title="URL 和路由"></a>URL 和路由</h2><p>在项目的设置目录下，urls.py 中，添加url 路由 <code>path(&#39;sales/orders/&#39;, listorders),</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line"># 别忘了导入 listorders 函数</span><br><span class="line">from sales.views import listorders</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    # 添加如下的路由记录</span><br><span class="line">    path(&#x27;sales/orders/&#x27;, listorders),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h2><blockquote><p>如果所有的app中的路径都在项目设置中的urls.py中，会导致项目十分臃肿而且不好维护，那么，在app的文件路径下，创建 urls.py,将app的 path 路由到此处，并将子路由，路由到 项目路径下的urls.py 中，使用 <code>django.urls</code> 中的 <code>include</code> 函数</p></blockquote><p>如在app urls.py 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;orders/&#x27;, views.listorders),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在项目的<code>urls.py</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  from django.contrib import admin</span><br><span class="line"></span><br><span class="line"># 导入一个include函数</span><br><span class="line">from django.urls import path, include</span><br><span class="line"></span><br><span class="line">from sales.views import listorders</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    # 凡是 url 以 sales/  开头的，</span><br><span class="line">    # 都根据 sales.urls 里面的 子路由表进行路由</span><br><span class="line">    path(&#x27;sales/&#x27;, include(&#x27;sales.urls&#x27;)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 能工巧匠路 </category>
          
          <category> Python </category>
          
          <category> Django笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2022/08/31/Python/"/>
      <url>/2022/08/31/Python/</url>
      
        <content type="html"><![CDATA[<p>你好啊，朋友，看看能不能行</p>]]></content>
      
      
      <categories>
          
          <category> 能工巧匠路 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

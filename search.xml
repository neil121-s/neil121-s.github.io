<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>短句</title>
      <link href="/2022/09/04/%E8%8B%B1%E8%AF%AD%E7%9F%AD%E5%8F%A5/"/>
      <url>/2022/09/04/%E8%8B%B1%E8%AF%AD%E7%9F%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单词本</title>
      <link href="/2022/09/04/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E6%9C%AC/"/>
      <url>/2022/09/04/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL笔记-增删改查</title>
      <link href="/2022/09/04/MySQL%E7%AC%94%E8%AE%B03-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>/2022/09/04/MySQL%E7%AC%94%E8%AE%B03-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 能工巧匠路 </category>
          
          <category> 数据库 </category>
          
          <category> MySQL笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于笔记</title>
      <link href="/2022/09/04/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/04/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>总结</p></blockquote><p>一般来说，我相信如果是学习一门知识，最好的方式可能是坐在一个安静的角落，拿开书本，打开笔记本，好好看，好好记录，好好记忆。但是这显然只适合学生时代，在这个信息和知识爆炸的<code>网络时代</code>。以往想学点什么东西的时候，往往先做好准备，买了不少笔记本，导致家里有不少的空白笔记本或者写了几页的笔记本。就算是记录了一些东西，由于各种外部诱惑，比如，手机，电脑，pad, 等等，会拿出笔记本再来看的机率也不会太大，导致所有学的东西，全部成了碎片，很难把这些碎片聚合起来。</p><p>如何系统化的学习，我相信，还是要有记录，这就是我搭建这个博客的初衷。</p><blockquote><p>好处</p></blockquote><ul><li>用博客记录，一是会有成就感，在边学习的过程中，边记录，记录成一篇还不错的文档的时候，会有成就感</li><li>归总，网络上的知识，总是来自四面八方，也许一个问题的查询，需要打开 n个浏览器窗口，用完之后，关闭浏览器，如果没有熟练使用的话，下次还得继续打开n个窗口，而且查到的东西，也许跟之前查询的东西还不一致。当用自己的博客记录后，总是乐于去查看专属于自己的网站的，有啥就记啥，缺啥就补啥</li><li>写文章，或许很多人在学生时代，还能写点东西，但是，除了从事文案工作的人员，往往出社会越久，写文章的能力就越差，逻辑思维能力也越来越差。我想这些，都是需要慢慢的锻炼和积累的。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL笔记2-联结表</title>
      <link href="/2022/09/04/MySQL%E7%AC%94%E8%AE%B02-%E8%81%94%E7%BB%93%E8%A1%A8/"/>
      <url>/2022/09/04/MySQL%E7%AC%94%E8%AE%B02-%E8%81%94%E7%BB%93%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="联结"><a href="#联结" class="headerlink" title="联结"></a>联结</h1><hr><h1 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h1><hr><h1 id="使用别名表"><a href="#使用别名表" class="headerlink" title="使用别名表"></a>使用别名表</h1><hr><h1 id="使用不同类型的联结"><a href="#使用不同类型的联结" class="headerlink" title="使用不同类型的联结"></a>使用不同类型的联结</h1><hr><h1 id="使用带聚集函数的联结"><a href="#使用带聚集函数的联结" class="headerlink" title="使用带聚集函数的联结"></a>使用带聚集函数的联结</h1><hr><h1 id="使用联结和联结条件"><a href="#使用联结和联结条件" class="headerlink" title="使用联结和联结条件"></a>使用联结和联结条件</h1>]]></content>
      
      
      <categories>
          
          <category> 能工巧匠路 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL笔记1-关于查询</title>
      <link href="/2022/09/04/MySQL%E7%AC%94%E8%AE%B01-%E6%9F%A5%E8%AF%A2%E7%AF%87/"/>
      <url>/2022/09/04/MySQL%E7%AC%94%E8%AE%B01-%E6%9F%A5%E8%AF%A2%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Mysql"><a href="#使用Mysql" class="headerlink" title="使用Mysql"></a>使用Mysql</h1><h2 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE database;</span><br></pre></td></tr></table></figure><h2 id="数据库和表"><a href="#数据库和表" class="headerlink" title="数据库和表"></a>数据库和表</h2><blockquote><p>展示所有的数据库</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW databases;</span><br></pre></td></tr></table></figure><blockquote><p>使用某数据库</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE database;</span><br></pre></td></tr></table></figure><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><blockquote><p>显示已选数据库中的表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW tables;</span><br></pre></td></tr></table></figure><blockquote><p>显示表中的列</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SHOW columns FROM tablename;</span><br><span class="line">#or</span><br><span class="line">DESCRIBE tablename;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>SHOW 语句</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SHOW status; #用于显示广泛的服务器状态信息</span><br><span class="line">SHOW create database;</span><br><span class="line">SHOW create table;#分别用来显示创建特定的数据库和表</span><br><span class="line">SHOW grants;#用来显示授权用户</span><br><span class="line">SHOW errors;</span><br><span class="line">SHOW warnings;#用来显示服务器错误或者警告信息</span><br><span class="line">HELP SHOW;显示允许的show 语句</span><br></pre></td></tr></table></figure><h1 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h1><h2 id="检索列-Column"><a href="#检索列-Column" class="headerlink" title="检索列 Column"></a>检索列 Column</h2><blockquote><p>检索单个列</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name FROM table;</span><br></pre></td></tr></table></figure><blockquote><p>检索多个列,用逗号分开多个列名,但是最后一个不能加</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name1,column_name2 FROM table;</span><br></pre></td></tr></table></figure><blockquote><p>检索所有列，使用* ，*为通配符</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from table;</span><br></pre></td></tr></table></figure><blockquote><p>检索不同的行 ,使用DISTINCT，只返回不同的值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISDICT row_name FROM tablename;</span><br></pre></td></tr></table></figure><blockquote><p>限制结果，LIMIT,</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name FROM table LIMIT 5;  #前5条信息</span><br><span class="line">SELECT column_name FROM table LIMIT 5,5;#从行5开始，后面5行，(start_index,offset)</span><br></pre></td></tr></table></figure><blockquote><p>使用完全限定的表明 <code>表名.列名</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_name.collumn_name FROM table_name</span><br></pre></td></tr></table></figure><h1 id="排序检索数据"><a href="#排序检索数据" class="headerlink" title="排序检索数据"></a>排序检索数据</h1><blockquote><p>单个排序 <code>ORDER BY</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table ORDER BY column_name;</span><br></pre></td></tr></table></figure><blockquote><p>多个排序,按多个列排序，只要指定列名，列名之间用逗号分开即可,优先级为从前到后，排完第一个后，排第二个</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table ORDER BY column1,column2...;</span><br></pre></td></tr></table></figure><blockquote><p>指定排序顺序 默认是升序<code>ASC</code>,降序为<code>DESC</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table ORDER BY column DESC;</span><br></pre></td></tr></table></figure><h1 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h1><blockquote><p>使用 <code>WHERE</code>子句,<code>WHERE</code>子语句的位置，同时使用其他子语句时，比如<code>ORDER BY</code>,<code>WHERE</code>需要放在前面</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column FROM table WHERE id = 1;</span><br></pre></td></tr></table></figure><blockquote><p><code>WHERE</code>子语句的操作</p></blockquote><p>操作符:</p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">等于</td></tr><tr><td align="center">&lt;&gt;</td><td align="center">不等于</td></tr><tr><td align="center">!&#x3D;</td><td align="center">不等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于</td></tr><tr><td align="center">BETWEEN</td><td align="center">在指定的两个值之间</td></tr></tbody></table><blockquote><p>举例</p></blockquote><ol><li>等于<code>SELECT * FROM table WHERE id = 1;</code></li><li>不等于<code>SELECT * FROM table WHERE id != 1;</code></li><li>大于 <code>SELECT * FROM table WHERE id &gt; 1;</code></li><li>小于 <code>SELECT * FROM table WHERE id &lt; 1;</code></li><li>大于等于<code>SELECT * FROM table WHERE id &gt;= 1;</code></li><li>小于等于<code>SELECT * FROM table WHERE id &lt;= 1;</code></li><li>BETWEEN <code>SELECT * FROM table WHERE id BETWEEN 1 AND 5;</code></li></ol><blockquote><p>空值检查 NULL</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table WHERE name IS NULL;</span><br></pre></td></tr></table></figure><h1 id="使用通配符过滤"><a href="#使用通配符过滤" class="headerlink" title="使用通配符过滤"></a>使用通配符过滤</h1><h2 id="LIKE-操作符"><a href="#LIKE-操作符" class="headerlink" title="LIKE 操作符"></a>LIKE 操作符</h2><blockquote><ul><li>为在搜索子句中使用通配符，必须使用LIKE操作符。</li><li>通配符（wildcard） 用来匹配值的一部分的特殊字符</li><li>搜索模式（search pattern）① 由字面值、通配符或两者组合构成的搜索条件。</li><li>谓词(predicate),操作符何时不是操作符？答案是在它作为谓词（predicate）时。从技术上说，LIKE是谓词而不是操作符。虽然最终的结果是相同的，但应该对此术语有所了解，以免在SQL文档中遇到此术语时不知道。</li></ul></blockquote><h3 id="百分号-通配符"><a href="#百分号-通配符" class="headerlink" title="百分号(%)通配符"></a>百分号(%)通配符</h3><blockquote><p>最常使用的通配符是百分号（％）。在搜索串中，％表示任何字符出现任意次数。例如，为了找出所有以词jet起头的产品，可使用以下SELECT语句：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT prod_id,prod_name FROM products WHERE product_name LIKE &#x27;jet%&#x27;;#表示检索 prod_id ,prod_name,当product_name 以 `jet`开头的时候</span><br></pre></td></tr></table></figure><blockquote><p>与其他不同，like 后面的条件是<code>区分大小写的</code>,比如<code>&#39;jet%&#39;</code>与<code>JetPack134</code>是不匹配的</p></blockquote><p>更多例子：</p><ul><li><code> SELECT prod_id,prod_name WHERE product_name LIKE %neil%&#39;;#中间包含neil,前面和后面随意</code></li></ul><blockquote><p>通配符不能匹配 NULL</p></blockquote><h3 id="下划线-通配符"><a href="#下划线-通配符" class="headerlink" title="下划线(_)通配符"></a>下划线(_)通配符</h3><blockquote><p>下划线通配符，用法和%类似，但是<code>_</code>只匹配单个字符，比如：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT prod_id,prod_name FROM products WHERE prod_name LIKE &#x27;_ton anvil&#x27;;</span><br></pre></td></tr></table></figure><h3 id="使用通配符的技巧"><a href="#使用通配符的技巧" class="headerlink" title="使用通配符的技巧"></a>使用通配符的技巧</h3><ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li><li>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据</li></ul><h1 id="用正则表达式进行搜索-REGEXP"><a href="#用正则表达式进行搜索-REGEXP" class="headerlink" title="用正则表达式进行搜索(REGEXP)"></a>用正则表达式进行搜索(REGEXP)</h1><blockquote><p>基本字符匹配,GEGEXP 和 LIKE的区别，两个很像，但是LIKE 没有通配符的时候，可能会查不出来，但是GEGEXP 只要包含了就能查出来</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT prod_name FROM products WHERE prod_name GEGEXP &#x27;1000&#x27; ORDER BY prod_name;</span><br></pre></td></tr></table></figure><blockquote><p>进行 <code>OR</code>匹配,可以有多个<code>|</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT prod_name FROM products WHERE prod_name GEGEXP &#x27;1000|2000&#x27; ORDER BY prod_name;</span><br></pre></td></tr></table></figure><blockquote><p>匹配几个字符之一 <code>[]</code>,满足任一条件都可以匹配，实际是一种 <code>OR</code>语句的集合，<code>[123]</code>等效于<code>[1|2|2]</code>,若匹配出<code>123</code>以外的东西在前面加一个<code>^</code>,如<code>[^123]</code>表示匹配除123以外的任何东西</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT prod_name FROM products WHERE prod_name GEGEXP &#x27;[123] Ton&#x27; ORDER BY prod_name;</span><br></pre></td></tr></table></figure><blockquote><p>匹配范围</p></blockquote><ul><li><code>[0123456789]</code>等于<code>[0-9]</code></li><li><code>a到z字母字符</code> 等于 <code>[a-z]</code></li></ul><blockquote><p>匹配特俗字符串，需要加转义符<code>\\</code>，比如要查找包含<code>.</code>的特俗字符串</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT prod_name FROM products GEGEXT &#x27;\\.&#x27; ORDER BY prod_name;</span><br></pre></td></tr></table></figure><p><code>\\</code>也可用来引用元字符如</p><table><thead><tr><th align="center">元字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">\\f</td><td align="center">换页</td></tr><tr><td align="center">\\n</td><td align="center">换行</td></tr><tr><td align="center">\\r</td><td align="center">回车</td></tr><tr><td align="center">\\t</td><td align="center">制表</td></tr><tr><td align="center">\\v</td><td align="center">纵向制表</td></tr></tbody></table><blockquote><p>匹配字符类</p></blockquote><table><thead><tr><th align="center">类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">[:alnum:]</td><td align="center">任意字母和数字(同[a-zA-z0-9])</td></tr><tr><td align="center">[:alpha:]</td><td align="center">任意字符(同[a-zA-Z])</td></tr><tr><td align="center">[:blanck:]</td><td align="center">空格和制表(同[\\t])</td></tr><tr><td align="center">[:cntrl:]</td><td align="center">ASCⅡ控制字符(ASCⅡ 0到31和127)</td></tr><tr><td align="center">[:digit:]</td><td align="center">任意数字(同[0-9])</td></tr><tr><td align="center">[:graph:]</td><td align="center">与[:print:]相同，但不包含空格</td></tr><tr><td align="center">[:lower:]</td><td align="center">任意小写字母同([a-z])</td></tr><tr><td align="center">[:print:]</td><td align="center">任意可打印字符</td></tr><tr><td align="center">[:punct]</td><td align="center">既不在[:alnum:]又不在[:cntrl:]中的任意字符</td></tr><tr><td align="center">[:space:]</td><td align="center">包括空格在内的任意空白字符([\\f\\n\\r\\t\\v])</td></tr><tr><td align="center">[:upper:]</td><td align="center">任意大写字母同([A-Z])</td></tr><tr><td align="center">[:xdigit:]</td><td align="center">任意十六进制数字(同[a-fA-F0-9])</td></tr></tbody></table><blockquote><p>匹配多个实例</p></blockquote><p>重复元字符</p><table><thead><tr><th align="center">元字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">0个或者多个匹配</td></tr><tr><td align="center">+</td><td align="center">1个或者多个匹配(等于{1,})</td></tr><tr><td align="center">?</td><td align="center">0个或者1个匹配(等于{0,1})</td></tr><tr><td align="center">{m}</td><td align="center">指定数目的匹配</td></tr><tr><td align="center">{m,}</td><td align="center">不少于自定数目的匹配</td></tr><tr><td align="center">{n,m}</td><td align="center">匹配数目的范围(m不超过255)</td></tr></tbody></table><blockquote><p>定位符</p></blockquote><table><thead><tr><th align="center">元字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">^</td><td align="center">文本的开始</td></tr><tr><td align="center">$</td><td align="center">文本的结尾</td></tr><tr><td align="center">[[:</td><td align="center">词的开始</td></tr><tr><td align="center">[[:&gt;:]]</td><td align="center">词的结尾</td></tr></tbody></table><h1 id="计算字符"><a href="#计算字符" class="headerlink" title="计算字符"></a>计算字符</h1><p>存储在数据库表中的数据一般不是应用程序所需要的格式。下面举几个例子。</p><ul><li>如果想在一个字段中既显示公司名，又显示公司的地址，但这两个信息一般包含在不同的表列中。</li><li>城市、州和邮政编码存储在不同的列中（应该这样），但邮件标签打印程序却需要把它们作为一个恰当格式的字段检索出来。</li><li>列数据是大小写混合的，但报表程序需要把所有数据按大写表示出来</li><li>物品订单表存储物品的价格和数量，但不需要存储每个物品的总价格（用价格乘以数量即可）。为打印发票，需要物品的总价格</li><li>需要根据表数据进行总数、平均数计算或其他计算</li></ul><blockquote><p><code>字段(field)</code>和<code>客户机与服务器的格式</code></p></blockquote><ul><li>字段（field） 基本上与列（column）的意思相同，经常互换使用，不过数据库列一般称为列，而术语字段通常用在计算字段的连接上。</li><li>客户机与服务器的格式 可在SQL语句内完成的许多转换和格式化工作都可以直接在客户机应用程序内完成。但一般来说，在数据库服务器上完成这些操作比在客户机中完成要快得多，因为DBMS是设计来快速有效地完成这种处理的。</li></ul><blockquote><p>拼接字段 <code>Concat()</code>函数<br>比如某表中，有分别两个单独的字段<code>name</code>和<code>country</code>需要把两个查出来拼接成<code>name(contry)</code>,多个值之间要用<code>,</code>分隔开,其中<code>AS out_put</code>,指示SQL创建一个包含指定计算的名为<code>out_put</code>的计算字段，相当新增了一个<code>out_put</code>的字段：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Concat(name,&#x27;(&#x27;,contry,&#x27;)&#x27;) from vendos ORDER BY name AS out_put;#</span><br></pre></td></tr></table></figure><blockquote><p>执行算数计算<br></p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加法</td></tr><tr><td align="center">-</td><td align="center">减法</td></tr><tr><td align="center">*</td><td align="center">乘法</td></tr><tr><td align="center">&#x2F;</td><td align="center">除法</td></tr><tr><td align="center">用法，如：</td><td align="center"></td></tr></tbody></table></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT price,num From,price*num AS totole_price sales WHERE id = 1;</span><br></pre></td></tr></table></figure><blockquote><p>文本处理函数</p></blockquote><p>常用的文本处理和函数</p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Left()</td><td align="center">返回串左边的字符</td></tr><tr><td align="center">Length()</td><td align="center">返回串的长度</td></tr><tr><td align="center">Locate()</td><td align="center">找出串的一个子串</td></tr><tr><td align="center">Lower()</td><td align="center">将串转换成小写</td></tr><tr><td align="center">LTrim()</td><td align="center">去掉串左边的空格</td></tr><tr><td align="center">Right()</td><td align="center">返回串右边的字符</td></tr><tr><td align="center">RTrim()</td><td align="center">去掉串右边的空格</td></tr><tr><td align="center">Soundex()</td><td align="center">返回串的SOUNDEX值</td></tr><tr><td align="center">SubString()</td><td align="center">返回子串的字符</td></tr><tr><td align="center">Upper()</td><td align="center">将串换换成大写</td></tr></tbody></table><p><code>Soundex</code> 是将任何文本串转换成描述其语音的字母数字模式的算法<br>用法：比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name ,Upper(user) AS uper_name FROM user ORDER BY id;</span><br></pre></td></tr></table></figure><blockquote><p>日期处理函数</p></blockquote><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">AddDate()</td><td align="center">增加一个日期(天，周等)</td></tr><tr><td align="center">AddTime()</td><td align="center">添加一个时间(时，分等)</td></tr><tr><td align="center">CurDate()</td><td align="center">返回当前日期</td></tr><tr><td align="center">CurTime()</td><td align="center">返回当前时间</td></tr><tr><td align="center">Date()</td><td align="center">返回日期时间的日期部分</td></tr><tr><td align="center">DateDiff()</td><td align="center">计算两个日期之差</td></tr><tr><td align="center">Date_Add()</td><td align="center">高度零个或的日期运算函数</td></tr><tr><td align="center">Date_Format()</td><td align="center">返回一个格式化的日期或者时间串</td></tr><tr><td align="center">Day()</td><td align="center">返回一个让日期的天数部分</td></tr><tr><td align="center">DayOfWeek()</td><td align="center">对于一个日期，返回对应的星期几</td></tr><tr><td align="center">Hour()</td><td align="center">返回一个时间的小时部分</td></tr><tr><td align="center">Minute()</td><td align="center">返回时间的分钟部分</td></tr><tr><td align="center">Month()</td><td align="center">返回时间的月份</td></tr><tr><td align="center">Now()</td><td align="center">返回当前日期和时间</td></tr><tr><td align="center">Second()</td><td align="center">返回时间的秒部分</td></tr><tr><td align="center">Time()</td><td align="center">返回日期时间的时间部分</td></tr><tr><td align="center">Year()</td><td align="center">返回日期的年份部分</td></tr></tbody></table><blockquote><p>处理数值处理函数</p></blockquote><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Abs()</td><td align="center">返回一个数的绝对值</td></tr><tr><td align="center">Cos()</td><td align="center">返回会一个角度的余弦</td></tr><tr><td align="center">Exp()</td><td align="center">返回一个书的指标数</td></tr><tr><td align="center">Mod()</td><td align="center">返回除操作的余数</td></tr><tr><td align="center">Pi()</td><td align="center">返回圆周率</td></tr><tr><td align="center">Rand()</td><td align="center">返回一个随机数</td></tr><tr><td align="center">Sin()</td><td align="center">返回一个角度的正弦</td></tr><tr><td align="center">Sqrt()</td><td align="center">返回一个数的平方根</td></tr><tr><td align="center">Tan()</td><td align="center">返回一个角度的正切</td></tr></tbody></table><h1 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h1><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">AVG()</td><td align="center">返回某列的平均数</td></tr><tr><td align="center">COUNT()</td><td align="center">返回某列的行数</td></tr><tr><td align="center">MAX()</td><td align="center">返回某列的最大值</td></tr><tr><td align="center">MIN()</td><td align="center">返回某列的最小值</td></tr><tr><td align="center">SUM()</td><td align="center">返回某列的和</td></tr></tbody></table><p>比如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(SCROE) AS avg_score WHERE type = math;</span><br></pre></td></tr></table></figure><h1 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h1><h1 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h1>]]></content>
      
      
      <categories>
          
          <category> 能工巧匠路 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于饮食</title>
      <link href="/2022/09/02/%E5%85%B3%E4%BA%8E%E9%A5%AE%E9%A3%9F/"/>
      <url>/2022/09/02/%E5%85%B3%E4%BA%8E%E9%A5%AE%E9%A3%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感谢图图的分享，感谢林老板的监督</p></blockquote><p>一个要控制体重的人，在选择食物的时候是有 技巧的，比方说有一些饮食原则，我可以给大家来分 享一下。 </p><p>你可以选择一些饱腹感比较强的、脂肪和糖含量比较 低的、蛋白质含量高的、膳食纤维含量高的、咀嚼性 比较好的食物，这样的食物就会利于你控制体重，减 肥。 我跟大家举个例子， 说到主食的时候， 我们知道精白 的米面， 越是那些富强粉的包子， 很白很好吃， 越是 精细的大米， 你觉得口感很好， 但是它消化的很快， 你的血糖升的也很快，而且他饿的越快，所以就促使 你吃的会更多一点，但是主食，比方说你换一个方 式，我吃一些粗粮杂粮， 我举一个例子，你用燕麦来 替代，像燕麦它在主食里边属于蛋白质含量比较高， 膳食纤维含量比较高，而且它的膳食纤维是一种叫β葡 聚糖的， 一种很好的可溶性的膳食纤维，对增进我们 的肠道健康，控制体重，还有一个防止便秘都非常的 有好处，比方说你用荞麦、莜麦来替代一部分精白的 米面，这样就很好。</p><p>我觉得一个要控制体重的人，在选择食物的时候是有技巧的，比方说有一些饮食原则，我可以给大家来分享一下。 你可以选择一些饱腹感比较强的、脂肪和糖含量比较低的、蛋白质含量高的、膳食纤维含量高的、咀嚼性比较好的食物，这样的食物就会利于你控制体重，减肥。 我跟大家举个例子，说到主食的时候，我们知道精白的米面，越是那些富强粉的包子，很白很好吃，越是精细的大米，你觉得口感很好，但是它消化的很快，你的血糖升的也很快，而且他饿的越快，所以就促使你吃的会更多一点，但是主食，比方说你换一个方式，我吃一些粗粮杂粮，我举一个例子，你用燕麦来替代，像燕麦它在主食里边属于蛋白质含量比较高，膳食纤维含量比较高，而且它的膳食纤维是一种叫β葡聚糖的，一种很好的可溶性的膳食纤维，对增进我们的肠道健康，控制体重，还有一个防止便秘都非常的有好处，比方说你用荞麦、莜麦来替代一部分精白的米面，这样就很好。 还有一些东西，比方说你吃一些豆类，你用这个饭里边加上一些红小豆、绿小豆，甚至是芸豆、鹰嘴豆，那个豆不要煮的特别烂，稍微的完整，你咀嚼的过程中，咀嚼的时间就会比较长一点。</p><p> 还有一些食物里边，比方说大豆里边，它的蛋白质含量也很丰富，而且还是优质蛋白，这样的话就是说一个是脂肪含量低，糖又少，这样饱腹感也比较好，这样一个替代。 还有一个，你想控制体重，吃饭也是有技巧的，比方说吃饭前你先喝一点液体，那么这个液体是指什么东西呢，比方说没有油的，油特别少的这些汤羹，还有喝点白水，或者是喝一小杯牛奶，喝点豆浆，使你胃有一点充盈，你就吃的少了。 还有一个我特别推崇的，我自己也是这么做的，就是说吃饭、吃菜的顺序有一个改变，我吃饭的时候先吃菜，尤其是绿叶蔬菜，我把绿叶蔬菜吃的一个半饱了再吃点肉，比方说鱼禽肉蛋都可以，我最后吃主食，这样的话就比较容易控制一个体重。 </p><p> 还有一个我吃饭的时候放慢一点速度，我慢慢的嚼，细嚼慢咽，而且我的每一餐都会有一些高蛋白的食物，你就饿的慢，因为你不进食一定量的蛋白质饿的会很快，一般的碳水化合物三个小时之内在胃里会排空，加上蛋白质以后，四到五个小时，那么加上脂肪，它就五个小时以上，所以每一顿，一定都有鱼、禽、肉、饭、菜，这样比较均衡。 还有一个最最重要的是减少在外就餐的次数，因为你在外就餐的时候，跟朋友谈的一高兴，吃的时间又长，菜品又多，会不自觉的增加很多很多食物的摄入量，导致你的摄食过量。 点菜也有技巧，我经常开玩笑说，学营养的人第一个就要学会怎么点菜，可能品种多一点，素菜也要多一点，总量少一点，可能有一些烹调方式也很重要，可能说一些清蒸的、白灼的、煮的、炖的、拌的这样的多一点，油煎、油炸的我就不去要。 </p><p> 还有一个特别好的方法，就是在家里面也做得到，就分餐吃，我一天就给你吃这么多，而且给每个人都盛出来，都分好，这个就非常方便计算你吃进去了多少，不管在外面吃，还是在家吃，你就这么分餐吃。 还有一点特别特别牢记，要吃到七八分饱，什么叫七八分饱，就是说你吃完了，我感觉我还有胃口，还可以吃，那六分饱就吃完跟没吃一样，六分饱可能大家做不到，七八分饱比较好，就是说你每一顿少吃一口，日积月累，从量变到质变，你每一顿已经习惯了少吃一两口，适当的控制这个进食的量，不要完全吃饱，更不能吃撑了，那么天长日久，你这个体重也会控制的非常好，这个是要特别注意的。 还有一个我反复强调的就是按时进餐，保持一个食量的稳定，如果想减肥的人，教大家一个小秘招，把你家里所有的碗筷都换成小号的，你就会吃的更少一点，这个总量控制好，如果这些你都注意的话，加上一个运动，不想减下来都难。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 饮食 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库相关</title>
      <link href="/2022/09/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/"/>
      <url>/2022/09/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="ORM-object-relational-mapping"><a href="#ORM-object-relational-mapping" class="headerlink" title="ORM (object relational mapping)"></a>ORM (object relational mapping)</h1><blockquote><p>定义一张数据库的表 就是定义一个继承自 django.db.models.Model 的类<br><br>  定义该表中的字段（列）， 就是定义该类里面的一些属性<br><br>  类的方法就是对该表中数据的处理方法，包括 数据的增删改查<br></p></blockquote><h1 id="生成表"><a href="#生成表" class="headerlink" title="生成表"></a>生成表</h1><p>如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Customer(models.Model):</span><br><span class="line">    # 客户名称</span><br><span class="line">    name = models.CharField(max_length=200)</span><br><span class="line"></span><br><span class="line">    # 联系电话</span><br><span class="line">    phonenumber = models.CharField(max_length=200)</span><br><span class="line"></span><br><span class="line">    # 地址</span><br><span class="line">    address = models.CharField(max_length=200)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://docs.djangoproject.com/en/2.0/ref/models/fields/#model-field-types">field 的官方文档</a></p><p>新增或者修改了后需要运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations common</span><br></pre></td></tr></table></figure><p>告诉Django common 的models.py 有更新</p><p>然后执行以下，生成表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h1 id="将数据库中的表自动生成对象"><a href="#将数据库中的表自动生成对象" class="headerlink" title="将数据库中的表自动生成对象"></a>将数据库中的表自动生成对象</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py inspectdb &gt; mysite\models.py</span><br></pre></td></tr></table></figure><h1 id="生成超级用户"><a href="#生成超级用户" class="headerlink" title="生成超级用户"></a>生成超级用户</h1><p>使用Django 中自带的 app admin 生成可视化的数据库操作</p><pre><code>python manage.py createsuperuser username</code></pre><p>通过 host&#x2F;admin 如 127.0.0.1:8000&#x2F;admin 访问</p><p>自己创建的表单，需要在代码中注册,一般在app下的 <code>admin.py</code> 中进行修改。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">admin.site.register(Customer)</span><br></pre></td></tr></table></figure><h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><p>用 django 中 继承于 model.Model 的类进行查询。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qs = Customer.objects().values() #查询Customer 表中的所有的数据的集合</span><br></pre></td></tr></table></figure><p>条件查询：通过 HttpRequset 中的 GET 属性获取查询条件。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ph = request.GET.get(&#x27;phone_number&#x27;,None)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://steelkiwi.com/blog/best-practices-working-django-models-python/">Django model最佳实践链接</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 能工巧匠路 </category>
          
          <category> Python </category>
          
          <category> Django笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django基础</title>
      <link href="/2022/09/02/Django%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/09/02/Django%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><pre><code>django-admin startproject mysite</code></pre><blockquote><p>会创建以下目录和文件</p></blockquote><ul><li>外层的 mysite&#x2F; 根目录是项目的容器。这个目录的名称对 Django 没有什么作用，你可以根据喜好重命名。</li><li>manage.py 是一个命令行实用脚本，可以通过不同的方式与 Django 项目交互。这个文件的详细说明参<br>见 Django Project 网站。</li><li>内部的 mysite&#x2F; 目录是项目的 Python 包。导入这里面的内容时要使用目录的名称（如<br>mysite.urls ）。</li><li>mysite&#x2F;init.py 是一个空文件，目的是让 Python 把这个目录识别为 Python 包。<br>Python，关于包的说明请阅读 Python 官方文档。）</li><li>mysite&#x2F;settings.py 是 Django 项目的设置&#x2F;配置。附录 D 对设置做了详细说明。</li><li>mysite&#x2F;urls.py 是 Django 项目的 URL 声明，即 Django 驱动的网站的“目录”。</li><li>mysite&#x2F;wsgi.py 是兼容 WSGI 的 Web 服务器的入口点，用于伺服项目</li></ul><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><pre><code>python manage.py startapp myapp</code></pre><blockquote><p>执行上面的命令会在当前路径下创建<code>myapp</code>目录，其目录结构如下所示：</p></blockquote><ul><li><code>__init__.py</code>：一个空文件，告诉Python解释器这个目录应该被视为一个Python的包。</li><li><code>admin.py</code>：可以用来注册模型，用于在Django框架自带的管理后台中管理模型。</li><li><code>apps.py</code>：当前应用的配置文件。</li><li><code>migrations</code>：存放与模型有关的数据库迁移信息。<ul><li><code>__init__.py</code>：一个空文件，告诉Python解释器这个目录应该被视为一个Python的包。</li></ul></li><li><code>models.py</code>：存放应用的数据模型（MTV中的M）。</li><li><code>tests.py</code>：包含测试应用各项功能的测试类和测试函数。</li><li><code>views.py</code>：处理用户HTTP请求并返回HTTP响应的函数或类（MTV中的V）。</li></ul><h3 id="关于app"><a href="#关于app" class="headerlink" title="关于app"></a>关于app</h3><blockquote><p>Django 中的一个app 就是项目里面的一个应用的意思。<br>  一个项目包含多个app。<br>  一个app 通常就是一个相对独立的模块 ，实现相对独立的功能。</p></blockquote><h2 id="URL-和路由"><a href="#URL-和路由" class="headerlink" title="URL 和路由"></a>URL 和路由</h2><p>在项目的设置目录下，urls.py 中，添加url 路由 <code>path(&#39;sales/orders/&#39;, listorders),</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line"># 别忘了导入 listorders 函数</span><br><span class="line">from sales.views import listorders</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    # 添加如下的路由记录</span><br><span class="line">    path(&#x27;sales/orders/&#x27;, listorders),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h2><blockquote><p>如果所有的app中的路径都在项目设置中的urls.py中，会导致项目十分臃肿而且不好维护，那么，在app的文件路径下，创建 urls.py,将app的 path 路由到此处，并将子路由，路由到 项目路径下的urls.py 中，使用 <code>django.urls</code> 中的 <code>include</code> 函数</p></blockquote><p>如在app urls.py 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;orders/&#x27;, views.listorders),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在项目的<code>urls.py</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  from django.contrib import admin</span><br><span class="line"></span><br><span class="line"># 导入一个include函数</span><br><span class="line">from django.urls import path, include</span><br><span class="line"></span><br><span class="line">from sales.views import listorders</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    # 凡是 url 以 sales/  开头的，</span><br><span class="line">    # 都根据 sales.urls 里面的 子路由表进行路由</span><br><span class="line">    path(&#x27;sales/&#x27;, include(&#x27;sales.urls&#x27;)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 能工巧匠路 </category>
          
          <category> Python </category>
          
          <category> Django笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2022/08/31/Python/"/>
      <url>/2022/08/31/Python/</url>
      
        <content type="html"><![CDATA[<p>你好啊，朋友，看看能不能行</p>]]></content>
      
      
      <categories>
          
          <category> 能工巧匠路 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
